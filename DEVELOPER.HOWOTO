.:: developer howto

if you want to contribute that would be fantastic.  check out the todo
list.  or email me: vimDebug at iijo dot org.

if you just want to add a new debgger to vimDebug, its fairly easy.  really.
here's how:



.:: how to add a debugger for your language (its pretty easy)

step 0:
   learn perl.

step 1:
   read the ARCHITECTURE document (its short and straightforward)

step 2:
   create debuggerName.pm

   make it inherit from Debugger.pm, like this:
      package Gdb;
      use Debugger;
      @ISA = qw( Debugger );
   then implement the callback functions in Debugger.pm (step(), _next(),
   cont(), etc.).

   some things you will probably want to do (but maybe not):
      - don't override Debugger->initialize().  it creates some streams
        for you.  then when you implement startDebugger(), call the
        Debugger->createProcess() utility function.

        if you do all that, you *shouldn't* have to worry about how to get
        data to and from the debugger process.  if you want to send a command
        to the debugger, just print to $Debugger::WRITE.  and if you want to
        parse the debugger output, read from $Debugger::READ (or better yet,
        use the $Debugger::getUntilPrompt() utility function)

        this may not work if your debugger prints directly to a tty.

      - take a look at the utility functions in Debugger.pm and Utils.pm.
        they may save you some time.

   some things you should do:
      - if you get a response from the debugger indicating the application
        being debugged has terminated, return $Debugger::APP_EXITED.  note
        that after vimDebug.vim has received its first $Debugger::APP_EXITED,
        the only things the user can do is exit or restart.

      - see the comments on $Debugger::LINE_INFO

      - when the debugger restarts, a vim user should never see their
        break points cleared, even if you, the developer, have to implement
        the feature because the debugger doesn't support it.  (see %breakPoints
        in Pdb.pm for an example)


   check out Gdb.pm and/or Pdb.pm for good examples to emulate.


step 3:
   edit DBGRgetDebuggerName() in vimDebug.vim

   add some lines that look something like this:

      elseif l:fileExtension == ".java"
         let l:debugger = "Jdb"
         return l:debugger

   l:debugger should match the name of your perl class in step 2.  so in this
   example its expected that someone has written a Jdb.pm and that vdd.pl can
   find it.


step 4:
   send me the code!  or questions or suggestions.
   email: vimDebug at iijo dot org









(c) eric johnson 09.31.2002
distribution under the GPL

email: vimDebug at iijo dot org
http://iijo.org

$Id: DEVELOPER.HOWOTO,v 1.3 2003/06/02 20:18:05 eric Exp eric $
